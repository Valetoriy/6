Сетевая модель видеоигр с использованием "авторитарного" сервера

// Игровой сервер
Игровой сервер - это сервер, являющийся источником событий в многопользовательской
видеоигре. Он передает достаточно данных о своем внутреннем состоянии, чтобы позволить
подключенным клиентам поддерживать свою собственную точную версию игрового мира для
показа игрокам.
"Авторитарный" означает, что сервер всегда прав. Если у пользователя и системы возникают
разногласия в игровых данных (например, в позиции игрока в виртуальном мире), то приоритет
всегда отдаётся данным сервера.

// Взаимодействие клиента и сервера
Клиент и сервер непрерывно общаются между собой. Когда клиент выполняет в игре
какое-либо действие, информация об этом действии отправляется в виде сообщения серверу
для проверки. Сервер, обеспечивая поддержку синхронизации, получает действия игроков,
обновляет игровой мир и рассылает обновленное состояние игры клиентам. Таким образом,
сервер управляет всем игровым миром, а клиенты являются простыми системами для сбора
действий игроков и отображения их результатов на экранах клиентов.

Типы сообщений, пересылаемых между сервером и клиентом:
    Запрос подключения. Присоединение к игре означает подключение к серверу. Однако,
    присоединиться может не каждый; к серверу уже может быть подключено максимально
    возможное количество игроков, или у игрока может не быть допустимой учетной записи.

    ...
    Остальные типы так или иначе относятся к обновлению игрового состояния. Сервер
    должен предоставить всем клиентам возможность периодически узнавать состояние игры.
    Сообщение об изменении игрового состояния обычно включает местоположение всех игровых
    персонажей, а также информацию о других игровых ресурсах.

// Очередь сообщений
Полученное от клиента сетевое сообщение помещается в очередь сообщений (message queue).
Использование очереди сообщений ускоряет сетевые операции и оставляет больше времени
для работы основного приложения (а не потока, работающего с сетью). Сервер постоянно
извлекает наиболее старые сообщения и перенаправляет их различным функциям для обработки.

Все сообщения, полученные клиентом и сервером, записываются вместе со временем их
получения. Сервер использует это время, чтобы определить, как обновлять состояние игроков.
Например, если полученное сервером сообщение не обрабатывалось в течение 100 мс, сервер
компенсирует пропущенное время в ходе выполнения обновления. Тоже самое верно и для
клиента. Если действие должно быть обновлено (особенно при использовании расчета
траектории), это время используется для соответствующего перемещения персонажей.

// Задержки
Поскольку в данной модели только сервер ответственен за управление состоянием игры, все
подключенные клиенты должны ожидать периодических обновлений для поддержания
хода игры. Поскольку скорость передачи данных по сети не позволяет осуществлять
мгновенную передачу, то данные, проходящие от клиента к серверу и обратно, задерживаются.
Эта задержка в процессе передачи называется запаздыванием (latency).
Из-за этого клиенты сталкиваются с проблемой отчётливо заментой разницы между временем,
когда действие было инициировано, и временем, когда оно происходит.
Эта задержка действий называется отставанием (lag) и может сделать игровой процесс
неустойчивым (или непригодным для пользования).

Существенная проблема при использовании сетевых систем — это отсчет игрового времени.
Попытка синхронизировать десятки клиентов практически невозможна, ведь каждый компьютер
подключен к сети с различным временем запаздывания; некоторые клиенты дольше отправляют
сообщения серверу и позже принимают их обратно от сервера.
На стороне клиента один игрок может выполнить перемещение точно в тот же момент, что и
другой, но поскольку эти действиям требуется время, чтобы достичь сервера, у клиента с
более быстрым соединением есть преимущество.

// Особенности сетевой модели
Подводя итоги, преимуществами рассмотренной архитектуры являются:
    Централизованное управление игровым миром
    Возможность проверки и контроля действий игроков
    Более простая реализация и настройка

Недостатки:
    Высокие требования к производительности и пропускной способности сервера
    Задержки при передаче данных между сервером и клиентами
    Единая точка отказа (если сервер выйдет из строя, игра станет недоступной)

//
На этом всё, спасибо за внимание.
