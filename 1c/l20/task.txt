При продаже если на складе есть просроченный товар -> продажа не проводится ->
оформляется документ списания просроченных товаров

Процедура ОбработкаПроведения(Отказ, Режим) 
 //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА // Данный фрагмент построен конструктором.
 // При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!! 
 Запрос = Новый Запрос; Запрос.Текст = 
  "ВЫБРАТЬ  | ОстаткиТоваровОстатки.Товар КАК Товар,
  | ОстаткиТоваровОстатки.СрокГодности КАК СрокГодности,  | ОстаткиТоваровОстатки.КоличествоОстаток КАК КоличествоОстаток
  |ИЗ  | РегистрНакопления.ОстаткиТоваров.Остатки КАК ОстаткиТоваровОстатки
  |ГДЕ  | ОстаткиТоваровОстатки.СрокГодности < &ТекущаяДата";
  Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
   РезультатЗапроса = Запрос.Выполнить();
   ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
  Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
  НовыйДокумент = Документы.СписаниеТоваров.СоздатьДокумент();  НовыйДокумент.Дата = ТекущаяДата();
  НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение); КонецЕсли;
  Запрос = Новый Запрос;
 Запрос.Текст =   "ВЫБРАТЬ
  | ПродажаТоваровСписокТоваров.Товар КАК Товар,  | СУММА(ПродажаТоваровСписокТоваров.Количество) КАК Количество
  |ПОМЕСТИТЬ ДОК  |ИЗ
  | Документ.ПродажаТоваров.СписокТоваров КАК ПродажаТоваровСписокТоваров  |ГДЕ
  | ПродажаТоваровСписокТоваров.Ссылка = &Ссылка  |
  |СГРУППИРОВАТЬ ПО  | ПродажаТоваровСписокТоваров.Товар
  |  |ИНДЕКСИРОВАТЬ ПО
  | Товар  |;
  |  |////////////////////////////////////////////////////////////////////////////////
  |ВЫБРАТЬ  | ОстаткиТоваровОстатки.Товар КАК Товар,
  | ОстаткиТоваровОстатки.СрокГодности КАК СрокГодности,  | ОстаткиТоваровОстатки.КоличествоОстаток КАК КоличествоОстаток
  |ПОМЕСТИТЬ ОСТ  |ИЗ
  | РегистрНакопления.ОстаткиТоваров.Остатки КАК ОстаткиТоваровОстатки  |
  |ИНДЕКСИРОВАТЬ ПО  | Товар
  |;  |
  |////////////////////////////////////////////////////////////////////////////////  |ВЫБРАТЬ
  | ДОК.Товар КАК Товар,  | ДОК.Количество КАК Количество,
  | ОСТ.СрокГодности КАК СрокГодности,  | ОСТ.КоличествоОстаток КАК КоличествоОстаток
  |ИЗ  | ДОК КАК ДОК
  |  ЛЕВОЕ СОЕДИНЕНИЕ ОСТ КАК ОСТ  |  ПО ДОК.Товар = ОСТ.Товар
  |  |УПОРЯДОЧИТЬ ПО
  | Товар,  | СрокГодности
  |ИТОГИ  | МИНИМУМ(Количество),
  | СУММА(КоличествоОстаток)  |ПО
  | Товар"; 
 Запрос.УстановитьПараметр("Ссылка", Ссылка); 
 РезультатЗапроса = Запрос.Выполнить();
 
 ВыборкаТовар = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
 Пока ВыборкаТовар.Следующий() Цикл  Если ВыборкаТовар.Количество > ВыборкаТовар.КоличествоОстаток Тогда
   Сообщить("Не хватает товаров " + ВыборкаТовар.Товар + " " +     (ВыборкаТовар.Количество - ВыборкаТовар.КоличествоОстаток) + " шт.");
   Отказ = Истина;  КонецЕсли; 
     ОсталосьСписать = ВыборкаТовар.Количество;  ВыборкаДетальныеЗаписи = ВыборкаТовар.Выбрать();
  Пока ВыборкаДетальныеЗаписи.Следующий()И ОсталосьСписать > 0 Цикл   Списать = Мин(ОсталосьСписать, ВыборкаДетальныеЗаписи.КоличествоОстаток);
   Движение = Движения.ОстаткиТоваров.Добавить();   Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
   Движение.Период = Дата;   Движение.Товар = ВыборкаДетальныеЗаписи.Товар;
   Движение.СрокГодности = ВыборкаДетальныеЗаписи.СрокГодности;   Движение.Количество = Списать;
   ОсталосьСписать = ОсталосьСписать - Списать;  КонецЦикла;
 КонецЦикла; 
 Движения.ОстаткиТоваров.Записывать = Истина; 
КонецПроцедуры

----
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)  //{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
 // Данный фрагмент построен конструктором. // При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
  Если СписокТоваров.Количество() = 0 Тогда
  Запрос = Новый Запрос;  Запрос.Текст = 
   "ВЫБРАТЬ   | ОстаткиТоваровОстатки.Товар КАК Товар,
   | ОстаткиТоваровОстатки.СрокГодности КАК СрокГодности,   | ОстаткиТоваровОстатки.КоличествоОстаток КАК КоличествоОстаток
   |ИЗ
   | РегистрНакопления.ОстаткиТоваров.Остатки КАК ОстаткиТоваровОстатки   |ГДЕ
   | ОстаткиТоваровОстатки.СрокГодности < &ТекущаяДата";  
  Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());  
  РезультатЗапроса = Запрос.Выполнить();  
  ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();  
  Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда   Сообщить("Отсутствуют просроченные товары для списания!");
   Отказ = Истина;  КонецЕсли;
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
   Товар = ВыборкаДетальныеЗаписи.Товар;   Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток;                   
   СрокГодности = ВыборкаДетальныеЗаписи.СрокГодности;      
      // Добавление строки в табличную часть документа      СписокТоваров.Добавить();
   СписокТоваров[СписокТоваров.Количество() - 1].Товар = Товар;   СписокТоваров[СписокТоваров.Количество() - 1].Количество = Количество;
   СписокТоваров[СписокТоваров.Количество() - 1].СрокГодности = СрокГодности;  КонецЦикла;
  КонецЕсли; //}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
КонецПроцедуры
Процедура ОбработкаПроведения(Отказ, Режим)
 //{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ // Данный фрагмент построен конструктором.
 // При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
 // регистр ОстаткиТоваров Расход Движения.ОстаткиТоваров.Записывать = Истина;
 Для Каждого ТекСтрокаСписокТоваров Из СписокТоваров Цикл  Движение = Движения.ОстаткиТоваров.Добавить();
  Движение.ВидДвижения = ВидДвиженияНакопления.Расход;  Движение.Период = Дата;
  Движение.Товар = ТекСтрокаСписокТоваров.Товар;  Движение.СрокГодности = ТекСтрокаСписокТоваров.СрокГодности;
  Движение.Количество = ТекСтрокаСписокТоваров.Количество; КонецЦикла;
 //}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры
